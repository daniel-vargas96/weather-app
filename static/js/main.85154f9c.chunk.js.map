{"version":3,"sources":["components/Titles.js","components/Form.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Titles","className","Form","props","onSubmit","getWeather","type","name","placeholder","Weather","city","country","temperature","humidity","description","error","API_KEY","App","state","undefined","e","a","preventDefault","target","elements","value","fetch","api_call","json","data","setState","main","temp","sys","weather","styleTitle","height","background","backgroundSize","display","alignItems","justifyContent","textAlign","color","this","includes","style","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.85154f9c.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\n\r\n\r\nconst Titles = () => (\r\n    <div>\r\n        <h1 className=\"title-container__title\">The Weather App</h1>\r\n        <h3 className=\"title-container__subtitle\">Find out temperature, condition and more...</h3>\r\n    </div>\r\n);\r\n\r\nexport default Titles;","import React from \"react\";\r\n\r\n\r\nconst Form = props => (\r\n    <form onSubmit={props.getWeather}>\r\n        <input type=\"text\" name=\"city\" placeholder=\"City...\" />\r\n        <input type=\"text\" name=\"country\" placeholder=\"Country...\" />\r\n        <button>Get Weather</button>\r\n    </form>\r\n);\r\n\r\nexport default Form;","import React from \"react\";\r\n\r\n\r\nconst Weather = props => (\r\n    <div className=\"weather__info\">\r\n        {\r\n            props.city && props.country && <p className=\"weather__key\">Location:\r\n            <span className=\"weather__value\"> {props.city}, {props.country}</span>\r\n            </p>\r\n        }\r\n        {\r\n            props.temperature && <p className=\"weather__key\">Temperature:\r\n            <span className=\"weather__value\"> {props.temperature}Â°C</span>\r\n            </p>\r\n        }\r\n        {\r\n            props.humidity && <p className=\"weather__key\">Humidity:\r\n            <span className=\"weather__value\"> {props.humidity}%</span>\r\n            </p>\r\n        }\r\n        {\r\n            props.description && <p className=\"weather__key\">Conditions:\r\n            <span className=\"weather__value\"> {props.description}</span>\r\n            </p>\r\n        }\r\n        {\r\n            props.error && <p>\r\n                <span className=\"weather__value\"> {props.error}</span>\r\n            </p>\r\n        }\r\n    </div>\r\n);\r\n\r\n\r\n\r\nexport default Weather;","import React from \"react\";\nimport Titles from \"./components/Titles\";\nimport Form from \"./components/Form\";\nimport Weather from \"./components/Weather\";\n\nconst API_KEY = \"ec6a9deaec61e69f90c23f77677eedb2\";\n\nclass App extends React.Component {\n\n  state = {\n    temperature: undefined,\n    city: undefined,\n    country: undefined,\n    humidity: undefined,\n    description: undefined,\n    error: undefined\n  }\n\n  getWeather = async (e) => {\n    e.preventDefault();\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n    \n\n\n    const api_call = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}&units=metric`);\n    const data = await api_call.json();\n\n    if (city && country) {\n      this.setState({\n        temperature: data.main.temp,\n        city: data.name,\n        country: data.sys.country,\n        humidity: data.main.humidity,\n        description: data.weather[0].description,\n        error: \"\"\n      })\n    } else {\n      this.setState({\n        temperature: undefined,\n        city: undefined,\n        country: undefined,\n        humidity: undefined,\n        description: undefined,\n        error: \"Please enter the values\"\n      });\n    }\n\n  }\n  render() {\n    //clear skies\n    let styleTitle = {\n      height: '90vh',\n      background: 'url(\"https://media2.giphy.com/media/wKnqovL33x9in9ci6X/giphy.webp?cid=ecf05e473ff208a0cf3ae305c0ec52b1939fe0f7f61b70e9&rid=giphy.webp&cid=ecf05e473ff208a0cf3ae305c0ec52b1939fe0f7f61b70e9&rid=giphy.webp&cid=ecf05e473ff208a0cf3ae305c0ec52b1939fe0f7f61b70e9&rid=giphy.webp&cid=ecf05e473ff208a0cf3ae305c0ec52b1939fe0f7f61b70e9&rid=giphy.webp\") center center no-repeat',\n      backgroundSize: 'cover',\n      display: '-webkit-inline-flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      textAlign: 'center',\n      color: \"white\",\n    }\n    //snowing GIF\n    if (this.state.temperature <= 10 && this.state.description.includes('snow')) {\n      styleTitle = {\n        height: '90vh',\n        background: 'url(\"https://media1.giphy.com/media/cGymv7T9ZzDdLGczy7/giphy.gif?cid=ecf05e47992c2142e72bb54a0b4704a294feeb66a3697007&rid=giphy.gif\") center center no-repeat',\n        backgroundSize: '100vh 100vw',\n        display: '-webkit-inline-flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        textAlign: 'center',\n        color: \"white\",\n      }\n    }\n\n    //rain\n    if(this.state.temperature <= 13 && this.state.description.includes('rain')) {\n      styleTitle = {\n        height: '90vh',\n        background: 'url(\"https://media1.giphy.com/media/d1G6qsjTJcHYhzxu/giphy.webp?cid=ecf05e4731ac24a2950e291841705804d86c4d6c1b1d7473&rid=giphy.webp\") center center no-repeat',\n        backgroundSize: '100vh 100vw',\n        display: '-webkit-inline-flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        textAlign: 'center',\n        color: \"white\",\n      }\n    }\n\n    //hot \n    if(this.state.temperature >= 24) {\n      styleTitle = {\n        height: '90vh',\n        background: 'url(\"https://media1.giphy.com/media/ctGFLebG1AqK4/giphy.gif?cid=ecf05e47aa6a804effc0745a0274cdb3bc44bd22ad33a38b&rid=giphy.gif\") center center no-repeat',\n        backgroundSize: '100vh 100vw',\n        display: '-webkit-inline-flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        textAlign: 'center',\n        color: \"white\",\n      }\n    }\n\n\n    //Clear warm skies\n    if (this.state.temperature >= 24 && this.state.description.includes('cloud')) {\n      styleTitle = {\n        height: '90vh',\n        background: 'url(\"https://media2.giphy.com/media/49VB0PHxR5Vsc/giphy.webp?cid=ecf05e47653ed14b2511aadbc33e6b8215d468424cee29e2&rid=giphy.webp\") center center no-repeat',\n        backgroundSize: '100vh 100vw',\n        display: '-webkit-inline-flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        textAlign: 'center',\n        color: \"black\",\n      }\n    } \n\n\n\n    return (\n      <div>\n        <div className=\"wrapper\">\n          <div className=\"main\">\n            <div className=\"container\">\n              <div className=\"row\">\n                <div style= {styleTitle} className='col-xs-5'>\n                  <Titles />\n                </div>\n                <div className=\"col-xs-7 form-container\">\n                  <Form getWeather={this.getWeather} />\n                  <Weather\n                    temperature={this.state.temperature}\n                    humidity={this.state.humidity}\n                    city={this.state.city}\n                    country={this.state.country}\n                    description={this.state.description}\n                    error={this.state.error}\n                  />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      \n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport \"./App.css\";\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}